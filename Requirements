
 1. Evolution of Requirements

Definition: Requirements are what the software should do, and they often evolve over time due to business changes, user feedback, or technical constraints.

Stages of Evolution:

| Stage                 | Explanation                                           | Example                                                              |
| --------------------- | ----------------------------------------------------- | -------------------------------------------------------------------- |
| Elicitation       | Gathering requirements from stakeholders              | Bank wants “mobile fund transfer.”                                   |
| Analysis          | Understand, prioritize, and check feasibility         | Decide which payment modes to support first: UPI, card, net banking. |
| Specification     | Document requirements formally (SRS)                  | “Fund transfer limit = ₹1,00,000/day.”                               |
| Validation        | Ensure requirements are complete, clear, and testable | Testable: “App must send OTP within 5 seconds.”                      |
| Change Management | Update requirements due to feedback or changes        | RBI changes rules → app needs updated interest calculation.          |

Real-Time Example:

 WhatsApp originally allowed text messaging only.
 Later, requirements evolved → voice messages, video calls, group calls, status feature were added.

---

 2. Who Provides the Requirements?

Requirements come from multiple stakeholders:

| Stakeholder                     | Example / Role                                                              |
| ------------------------------- | --------------------------------------------------------------------------- |
| Business / Client           | Defines what software should achieve. Example: Bank wants QR code payments. |
| End Users                   | Provide usability needs. Example: Users want dark mode in WhatsApp.     |
| Regulatory Bodies           | Legal / compliance requirements. Example: RBI rules for fund transfers.     |

---

 3. Challenges in Requirement Gathering

1. Unclear Requirements – Stakeholders don’t know exactly what they want.

    Example: “Make login secure” → too vague.

2. Changing Requirements – Mid-project changes.

    Example: Add UPI payments after initial release.

3. Communication Gaps – Developers misunderstand business needs.

    Example: Bank wants 2FA → dev implements only password.

4. Conflicting Requirements – Different stakeholders want opposite things.

    Example: Users want quick login, security team wants multiple verifications.

5. Incomplete Requirements – Missing details.

    Example: SRS doesn’t specify daily transfer limit.

6. Technical Feasibility – Some ideas may be impossible to implement.

    Example: Real-time fraud detection may need extra servers and resources.

---

 4. Why Do We Need Good Requirements?

Good requirements are essential because:

1. Provide clear direction → developers know exactly what to build.

    Example: “Send OTP within 5 seconds” is clear.

2. Reduce costs → prevent expensive fixes later.

    Example: Fixing fund transfer bug after release is costly.

3. Better planning → estimate resources and time accurately.

4. Enable testing → testers can design test cases from clear requirements.


---

 5. Characteristics of Good Requirements

| Characteristic            | Meaning                    | Example                                              |
| ------------------------- | -------------------------- | ---------------------------------------------------- |
| Correct               | Matches stakeholder needs  | OTP must reach in 5 sec                              |
| Unambiguous           | Only one interpretation    | Daily fund transfer limit = ₹1,00,000                |
| Complete              | Covers all functionality   | Login, 2FA, fund transfer, notifications             |
| Consistent            | No conflicts               | Security and usability requirements don’t contradict |
| Verifiable / Testable | Can be tested              | “App must allow 10 simultaneous group calls”         |
| Traceable             | Can track to source        | Requirement linked to business goal                  |
| Understandable        | Clear for all stakeholders | Written in simple language                           |

---

 6. Impact of Bad Requirements

| Problem                 | Impact / Example                                                                                      |
| ----------------------- | ----------------------------------------------------------------------------------------------------- |
| Vague / Ambiguous   | Wrong implementation. Example: “Make voice notes better” → different developers interpret differently |
| Incomplete          | Missing functionality → user complaints                                                               |
| Conflicting         | Delays, disagreements between teams                                                                   |
| Unrealistic         | Deadlines missed, frustrated devs                                                                     |
| Unverifiable        | Testers cannot validate → defects go unnoticed                                                        |
| Constantly Changing | Scope creep, increased cost                                                                           |

Real-Time Example (WhatsApp):

 Requirement: “Improve media sharing.”
 Bad requirement → unclear which media (images, videos, docs?), no size limits → developers may implement only images → user complaints.

---


# **1. Functional vs Non-Functional Requirements**

### **A. Functional Requirements (FR)**

* **Definition:** Describe **what the system should do** (features and behavior).
* **Examples:**

  * WhatsApp: Send messages, voice notes, video calls.
  * Banking App: Fund transfer, account balance check, bill payment.

**Real-Time Example:**

* WhatsApp FR: “User can send a message to a contact.”
* Banking FR: “User can transfer ₹1,00,000 per day via UPI.”

---

### **B. Non-Functional Requirements (NFR)**

* **Definition:** Describe **how the system should behave**, i.e., quality attributes.
* **Focus:** Performance, reliability, usability, security, scalability.

| Category    | WhatsApp Example          | Banking App Example                |
| ----------- | ------------------------- | ---------------------------------- |
| Performance | Messages delivered in <2s | Fund transfer processed <5s        |
| Security    | End-to-end encryption     | OTP & 2FA for login & transactions |
| Usability   | Simple UI                 | Easy navigation for fund transfer  |
| Reliability | 99.9% uptime              | App available 24/7                 |
| Scalability | Millions of users         | Handle peak loads on salary day    |

---

# **2. Stable vs Volatile Requirements**

| Type         | Definition                                                                       | Example                                                                             |
| ------------ | -------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------- |
| **Stable**   | Core features that **rarely change**                                             | WhatsApp: Sending messages; Banking App: Fund transfer, login                       |
| **Volatile** | Features that **frequently change** due to trends, user feedback, or regulations | WhatsApp: Dark mode, emoji reactions; Banking App: UI redesign, new RBI regulations |

**Key Point:**

* Stable → foundation of the app, must always work correctly.
* Volatile → need flexible design to adapt quickly.

---



# **4. Requirements Change**

**Definition:**

* Modifying or adding requirements **during the software lifecycle**.

**Reasons:**

* New stakeholder needs
* Regulatory changes
* Technology upgrades
* Bug fixes or performance issues

**Example:**

* Banking App initially supports only UPI. Later, a **requirement change** adds **credit card payments**.

---
Sure! Let’s focus **entirely on Requirement Creep** and explain it clearly with examples.

---

# **1. What is Requirement Creep?**

**Definition:**

* Requirement Creep, also called **Scope Creep**, is the **continuous or uncontrolled addition of new requirements** to a project **after the baseline has been set**, without following formal change management.

**Key Point:**

* It **happens gradually** and often goes unnoticed until it impacts **schedule, cost, or quality**.

---

# **2. Why Requirement Creep Happens**

1. **Unclear initial requirements**

   * Stakeholders are unsure what they want → keep adding new ideas.

2. **Changing market or business needs**

   * Business wants to stay competitive → new features requested mid-project.

3. **Poor change management process**

   * Changes are accepted without formal approval or impact analysis.

4. **Stakeholder pressure**

   * Managers or clients ask for extra features without updating project scope.

---

# **3. Impact of Requirement Creep**

| Impact               | Example                                                                                                                           |
| -------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| **Project Delays**   | Banking App initially planned for fund transfer only → adding mini statements and bill payments mid-development → release delayed |
| **Increased Cost**   | Extra development and testing resources required                                                                                  |
| **Quality Issues**   | Rushed implementation → more bugs or failures                                                                                     |
| **Team Frustration** | Developers and testers overwhelmed by changing scope                                                                              |
| **Missed Deadlines** | Original milestones no longer achievable                                                                                          |

---

# **4. Real-Time Example**

**WhatsApp Example:**

* Original plan: Version 2.0 → Send messages + voice calls
* During development: Stakeholders request

  * Status updates
  * Emoji reactions
  * Dark mode
  * Video calls
* Without proper change management → project delayed, testing extended, release pushed back

**Banking App Example:**

* Original plan: Mobile fund transfer
* During development: Stakeholders request

  * Mini statements
  * Bill payments
  * QR code payments
  * Push notifications
* If added without formal process → cost overruns and schedule slips

---

# **5. How to Prevent Requirement Creep**

1. **Baselining Requirements** – Freeze approved requirements; only formal changes allowed.
2. **Change Management Process** – Evaluate every new request before approval.
3. **Requirement Traceability Matrix (RTM)** – Track each requirement, linked to design and test cases.
4. **Clear Communication** – Keep stakeholders informed about impacts of adding new requirements.
5. **Prioritization** – Use MoSCoW method (Must have, Should have, Could have, Won’t have) to filter new requests.

---

# **6. Summary**

```
Requirement Creep = uncontrolled addition of new requirements after baseline
Causes → unclear requirements, changing business needs, poor change management, stakeholder pressure
Impacts → delays, higher cost, lower quality, missed deadlines
Prevention → Baselining, Change Management, RTM, Prioritization, Communication
```

---

If you want, I can **draw a simple diagram** showing **Requirement Creep causes, impacts, and prevention** using **WhatsApp & Banking App examples** — this makes it **super easy to visualize**.

Do you want me to make that diagram?

