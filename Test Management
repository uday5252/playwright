
 1️⃣ Test Organization

👉 What it means: How testing work is structured in a project — roles, responsibilities, and processes.

 Example (Real-time): Think of testing like running a hospital.

   Doctors = Testers (diagnose the “bugs”)
   Head Doctor = Test Manager (organizes, assigns, ensures quality)
   Departments = Different testing types (functional, performance, security)

 In IT project:

   Test Manager → decides who tests what, when, and with what tools.
   Testers → execute test cases, report bugs.
   Developers → fix bugs.
   Business Analyst → explains requirements.

✅ Test Organization ensures: Clear roles, no duplication, smooth workflow.

---

 2️⃣ Independent Testing

👉 What it means: Testing done by people different from the developers who built the code.

 Why? Developers may miss bugs in their own code (bias).

 Levels of independence:

   Lowest → Developer tests own code.
   Medium → Another developer tests.
   Higher → Dedicated tester tests.
   Highest → External test agency tests.

 Analogy: Imagine you wrote an exam paper. If you check your own paper, you may overlook mistakes. But if another teacher checks, errors are more likely to be caught.

 Example in IT:

   Developer builds a “Login” feature.
   Independent tester checks not only valid login but also invalid password, SQL injection, browser compatibility, etc.

✅ Independent testing increases objectivity and defect detection.

---

 3️⃣ Tasks of a Test Manager vs Tester

 Test Manager (Leader role)

   Defines the test strategy (overall approach).
   Plans resources, schedule, tools.
   Coordinates with dev team, business, clients.
   Tracks progress with metrics (defect density, test coverage).

  👉 Example: Like a football coach → decides training plan, positions, strategies.

 Tester (Executor role)

   Designs test cases.
   Executes tests.
   Reports bugs.
   Re-tests after fixes.

  👉 Example: Like a football player → follows the coach’s plan and plays on the field.

✅ Together → Manager = Planner, Tester = Doer.

---

 4️⃣ Test Planning and Estimation

👉 Test Planning: Document that describes how testing will be done.
👉 Estimation: Predicting how much effort/time/cost testing will take.

 Analogy: Planning a wedding.

   Test Plan = Decide venue, food, decorations, guest list.
   Estimation = How many days to arrange, how much money, how many people needed.

 Example in IT:

   Project: Banking app.
   Plan: What types of testing? (functional, security, performance).
   Estimation: 3 testers for 2 months = 300 test cases = 6 weeks execution.

✅ Test Planning ensures clarity, Estimation ensures realistic deadlines.

---

 5️⃣ Purpose and Content of a Test Plan

👉 Purpose: To give a roadmap of testing so everyone knows scope, strategy, resources, schedule, risks.

👉 Content of a Test Plan (common structure in ISTQB & IEEE 829):

1. Introduction → Why testing is needed.
2. Test Items → What features/modules will be tested.
3. Scope (In & Out) → What is included/excluded.
4. Test Approach/Strategy → Manual vs automation, levels of testing.
5. Test Environment → Hardware, software, browsers.
6. Resources & Roles → Test manager, testers, tools.
7. Schedule & Milestones → When to start, end, deadlines.
8. Entry/Exit Criteria → When to start testing, when to stop.
9. Risks & Mitigation → If test environment not ready, what’s backup.
10. Deliverables → Test cases, reports, metrics.

 Example in Real-time (Bank App Test Plan):

   Scope: Login, signup, funds transfer (in scope); AI chatbot (out of scope).
   Environment: Windows 10, Chrome, DB = MySQL.
   Entry criteria: Dev provides stable build.
   Exit criteria: All high severity defects fixed, 95% pass rate.
   Risks: If UAT environment not ready → delay testing by 1 week.

1️⃣ Test Strategy and Test Approach

 🔹 Test Strategy

👉 High-level plan for testing across the whole project. It’s long-term and usually written once for the entire organization/project.

 Defines what types of testing (functional, regression, performance, security).
 Explains tools, levels, roles.
 Written by: Test Manager or QA Lead.

🛠 Analogy: Like a country’s defense strategy → Defines whether to use army, navy, or air force in different situations.

🛠 Example (IT):

 Banking app → Strategy includes:

   Functional testing for login & funds transfer.
   Security testing for fraud detection.
   Automation using Selenium for regression.

---

 🔹 Test Approach

👉 Detailed implementation of the strategy at project or sprint level.

 Defines how tests will be carried out.
 Written by: Test Lead / Senior Tester.

🛠 Analogy: If strategy is the “what”, then approach is the “how.”

 Strategy = “We will play cricket.”
 Approach = “We’ll use 3 bowlers, 7 batsmen, 1 all-rounder.”

🛠 Example (IT):

 Login module → Approach = Write 15 manual test cases, automate 10 using Selenium, test on Chrome & Firefox.

✅ Difference:

 Strategy = Big picture (long-term, organizational level).
 Approach = Execution detail (short-term, sprint/project level).

---

 2️⃣ Entry Criteria and Exit Criteria

 🔹 Entry Criteria (Definition of Ready – DoR)

👉 Conditions that must be met before testing can start.

🛠 Analogy: You can’t start cooking 🍳 unless ingredients are ready.

🛠 Example (IT):

 Software is ready.
 Test cases are written and reviewed.
 Test data is prepared.
 Tools (e.g., Selenium, JIRA) are available.

✅ If entry criteria not met → testing may fail or give false results.

---

 🔹 Exit Criteria (Definition of Done – DoD)

👉 Conditions that must be met before testing can end / feature is considered done.

🛠 Analogy: You can’t say the dish is ready until it is fully cooked and served 🍲.

🛠 Example (IT):

 All planned test cases executed.
 95% test cases passed.
 No critical/high-severity bugs remain open.
 Test summary report created.

✅ If exit criteria not met → product cannot be released.

---

 3️⃣ Test Execution Schedule

👉 It is a timeline/calendar showing when each test will be executed, by whom, and in what order.

🛠 Analogy: Like a train timetable 🚆 → defines when each train (test) runs and who’s in charge.

🛠 Example (IT):
For an E-commerce project sprint (2 weeks):

 Day 1-2 → Smoke testing.
 Day 3-5 → Functional testing of Login, Search.
 Day 6-8 → Checkout & Payment.
 Day 9-10 → Regression testing.
 Day 11 → Performance testing.
 Day 12-13 → Bug re-testing.
 Day 14 → Final test summary report.

✅ Helps in resource planning and avoids last-minute chaos.

---

 4️⃣ Factors Influencing Test Effort

👉 Test effort = amount of work/time needed for testing.

Factors include:

1. Size of the system → More features = more test cases.
2. Complexity → Login is simple, fraud detection is complex.
3. Quality of requirements → Clear requirements → less effort.
4. Tools & Automation → Automation reduces effort in long run.
5. Team skill level → Experienced testers work faster.
6. Environment availability → If test servers are unstable, effort increases.
7. Dependencies → If developers delay builds, testers get less time.

🛠 Analogy: Like planning a wedding 💍 → effort depends on number of guests, type of venue, weather, and how skilled the event manager is.

🛠 Example (IT):

 Testing a simple calculator app = 20 test cases → low effort.
 Testing a banking app with loans, accounts, transactions, payments = 2000 test cases → huge effort.

---

 5️⃣ Test Estimation Techniques

👉 Test Estimation = Predicting how much time, effort, people are needed for testing.

 Common Techniques:

1. Expert Judgment

 Based on experience of senior testers.
 🛠 Example: Tester says, “I tested similar login before, will take 2 days.”

2. Work Breakdown Structure (WBS)

 Break testing into smaller tasks, estimate each, then sum up.
 🛠 Example:

   Write test cases → 2 days
   Execute test cases → 4 days
   Re-test bugs → 2 days
   Total = 8 days

3. Function Point Analysis

 Estimate based on number of functionalities and their complexity.
 🛠 Example: Login = 5 points, Checkout = 20 points → bigger = more effort.

4. Test Case Point Method

 Count number of test cases and effort per case.
 🛠 Example: 100 cases × 15 mins each = 25 hours.

5. Three-point Estimation (PERT)

 Uses Optimistic (O), Pessimistic (P), and Most Likely (M).
 Formula: (O + 4M + P) ÷ 6.
 🛠 Example: For a module → O=5 days, M=7 days, P=11 days → Estimation = 7.3 days.

🛠 Analogy: Like estimating how long cooking will take.

 If everything goes smooth → 30 mins.
 If a small problem → 45 mins.
 If big problem → 1 hour.
 Average → \~45 mins.

---


 1️⃣ Test Monitoring and Control

 🔹 Test Monitoring

👉 Tracking and checking testing progress against the plan.

 It answers: “Where are we right now?”

🛠 Analogy: Like checking the Google Maps GPS while driving 🚗 → Are we still on the right route? How much distance left?

🛠 Example (IT):

 Planned 100 test cases for this sprint.
 By Day 5, only 30 are executed → monitoring shows we are behind schedule.

---

 🔹 Test Control

👉 Actions taken to correct deviations when monitoring shows issues.

 It answers: “What do we do if we are off-track?”

🛠 Analogy: If GPS shows a traffic jam 🚦, you take a different route.

🛠 Example (IT):

 Only 30 test cases executed instead of 50.
 Control action = Assign 2 more testers OR reduce low-priority tests.


 2️⃣ Metrics Used in Testing

👉 Metrics = Numbers that help measure quality and progress.

 Common Metrics:

1. Test Progress Metrics

 % of test cases executed.
 % of test cases passed/failed.

2. Defect Metrics

 Defect Density = No. of defects ÷ size of module.
 Defect Severity Distribution = High/Medium/Low defects.
 Defect Removal Efficiency = % of defects found before release.

3. Effort Metrics

 Planned effort vs. actual effort.
 Test execution rate (e.g., 20 cases/day).

🛠 Analogy: Like a fitness tracker 🏃 – counts steps, calories, heart rate → gives you data to judge progress.

🛠 Example (IT):

 Sprint Goal = 100 test cases.
 Day 7 = 70 executed, 50 passed, 20 failed.
 10 defects found (4 critical, 6 medium).

---

 3️⃣ Purposes of Test Reports

👉 Test Report = Summary of testing activities, results, and product quality.

Why we need them?

1. To inform stakeholders (managers, clients, devs).
2. To show product quality & readiness.
3. To track project risks.
4. To improve future projects (lessons learned).

---

 4️⃣ Contents of a Test Report

Typical sections include:

1. Introduction → What was tested (scope, features, environment).
2. Test Progress → Planned vs. executed test cases.
3. Defect Summary → Open, closed, severity, priority.
4. Test Results → Pass %, Fail %, Blocked.
5. Risks/Issues → Any problems (e.g., unstable environment).
6. Exit Criteria Check → Were all conditions met?
7. Conclusion/Recommendation → Ready for release or not.

---

 5️⃣ Audiences for Test Reports

Different people care about different parts of the report:

 Project Manager → Wants status vs. schedule, risks, overall readiness.
 Developers → Want detailed defect info (logs, reproduction steps).
 Clients/Business → Want summary: Is the product ready? Is quality acceptable?
 QA Team → Want insights for process improvement.

🛠 Analogy: Like a school report card 📘:

 Parents → look at overall grades.
 Teacher → looks at detailed marks and weak areas.
 Student → sees progress and where to improve.

🛠 Example (IT):
For an e-commerce checkout module:

 200 test cases planned, 190 executed (95%).
 160 passed, 30 failed.
 5 critical defects remain open.
 Recommendation: Do not release until critical bugs are fixed.

---


 1️⃣ Definition of Risk

👉 Risk = Uncertainty of something going wrong in the future.
It is the possibility of a negative event that may affect the project or product.

 Risk always has:

  1. Cause → Why it could happen.
  2. Event → What might happen.
  3. Impact → How bad it will be if it happens.

🛠 Analogy:
Planning a wedding outdoors 🌧️ →

 Cause = Rainy season.
 Event = It may rain on wedding day.
 Impact = Guests get wet, wedding delayed.

🛠 Example (IT):

 Cause = New developer joins.
 Event = Code might have bugs.
 Impact = More defects in login feature.

---

 2️⃣ Types of Risks

 🔹 Product Risks

👉 Problems in the quality of the product itself.

🛠 Analogy: Car 🚗 has weak brakes → risk of accidents.

🛠 Examples (IT):

 Login feature may not work with special characters.
 Payment gateway may fail under high load.
 Data may not be encrypted → security risk.

---

 🔹 Project Risks

👉 Problems in the way the project is run/managed.

🛠 Analogy: Wedding planner forgets to book the hall → event delayed.

🛠 Examples (IT):

 Test environment not ready on time.
 Budget cuts reduce tester team size.
 Developer delays in delivering build.

✅ Summary:

 Product Risks = Defects in the software.
 Project Risks = Issues in project management or resources.

---

 3️⃣ Risk-based Testing

👉 Testing where you focus more effort on high-risk areas of the product.

🛠 Analogy:

 In airport security ✈️ → They check international passengers more strictly than domestic ones, because risk is higher.

🛠 Example (IT):

 In a banking app:

   High-risk = Payment transfer (money loss if it fails). → Test deeply with functional, security, performance.
   Low-risk = Change profile picture. → Test lightly.

✅ Benefit → Ensures critical areas are tested first and most thoroughly.

---

 4️⃣ Risks and Product Quality

👉 If risks are not managed properly, product quality suffers.

🛠 Examples (IT):

 If performance risks ignored → app may crash during big sales.
 If security risks ignored → hackers may steal data.
 If test environment risks ignored → testers can’t test properly, leading to undetected bugs.

🛠 Analogy: Ignoring health risks (like not exercising, eating junk) → long-term quality of life goes down.

✅ So managing risks = ensuring good quality product.


# 1️⃣ Defect Management

👉 Defect Management = The process of finding, fixing, tracking, and closing bugs.
It ensures defects are handled in a systematic way so nothing slips through.

---

 🔹 Defect Life Cycle (Bug Life Cycle)

When a bug is reported, it goes through stages:

1. New / Open → Tester finds bug in login and reports it in JIRA.
2. Assigned → Bug is assigned to a developer.
3. In Progress → Developer starts fixing it.
4. Fixed / Resolved → Developer fixes bug and marks as resolved.
5. Retesting → Tester checks again in new build.
6. Closed → If bug is fixed → status closed.
7. Reopened → If bug still exists → reopened.

🛠 Analogy: Like complaining about a broken TV 📺 in a store.

 You report issue → Customer care assigns technician → Technician fixes → You check → If fine, case closed.

---

 🔹 Defect Severity vs Priority

 Severity = How badly the defect impacts system.
 Priority = How soon it must be fixed.

🛠 Example (E-commerce app):

 High Severity, High Priority → “Pay Now” button not working.
 High Severity, Low Priority → Crash happens only on an old browser.
 Low Severity, High Priority → Company logo spelled wrong → Bad for brand.
 Low Severity, Low Priority → Minor color mismatch on footer.

---

 🔹 Why Defect Management is Important?

 Tracks all issues in one place (JIRA, Bugzilla, Azure DevOps).
 Helps prioritize fixes.
 Ensures quality before release.
 Gives metrics for process improvement.

---

# 2️⃣ Testing Metrics

👉 Metrics = Numbers that measure how testing is going (progress) and product quality.

---

 🔹 Common Testing Metrics

# 1. Test Case Metrics

 Planned vs Executed → No. of cases executed / planned.
 Pass % → Passed ÷ Executed.
 Fail % → Failed ÷ Executed.

🛠 Example:

 Planned = 100 cases, Executed = 80, Pass = 60, Fail = 20.
 Execution % = 80%. Pass % = 75%.

---

# 2. Defect Metrics

 Defect Density = Defects ÷ size (e.g., per 1,000 LOC or per module).
 Defect Leakage = Defects missed in testing but found later (in UAT/production).
 Defect Removal Efficiency = (Defects found in testing ÷ Total defects) × 100.

🛠 Example:

 50 defects found in QA, 10 defects found by client later.
 Leakage = 10. DRE = 50 ÷ (50+10) = 83%.

---

# 3. Effort Metrics

 Planned vs Actual Effort (hours/days).
 Test Execution Rate (cases/day).

🛠 Example:

 Planned = 5 testers × 5 days = 25 days.
 Actual = 30 days. → Overrun = +5 days.

---

# 4. Coverage Metrics

 Requirements Coverage → % of requirements with test cases.
 Code Coverage → % of code executed during testing.

🛠 Example:

 50 requirements, 45 covered → 90% coverage.

---

 🔹 Why Metrics are Needed?

 To monitor progress (Are we on track?).
 To control testing (Need more resources?).
 To show quality to stakeholders (Is product ready?).
 To improve future projects (Lessons from metrics).

